
Task11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000071d  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000642  00000000  00000000  00000905  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027c  00000000  00000000  00000f47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000011c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000376  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  0000157e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5d 00 	call	0xba	; 0xba <main>
  78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:
	//ADCSRA: ADEN -> Turn ADC on
	
	
	//ADPS(2->0): Sampling frequency
	//set data directions
	DDRD |= (1<<RED_LIGHT) | (1<<YELLOW_LIGHT) | (1<<GREEN_LIGHT);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	87 60       	ori	r24, 0x07	; 7
  84:	8a b9       	out	0x0a, r24	; 10
	
	ADCSRA |= (1<<ADEN); //turn on ADC
  86:	ea e7       	ldi	r30, 0x7A	; 122
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	80 68       	ori	r24, 0x80	; 128
  8e:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //sets the ADC compare mode
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
  9a:	08 95       	ret

0000009c <get_adc_value>:
uint16_t get_adc_value()
{
	uint16_t lowbyte;
	uint16_t highbyte;
	
	ADCSRA |= (1<<ADSC); //ADCSRA: ADSC -> Start data acquisition
  9c:	ea e7       	ldi	r30, 0x7A	; 122
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	80 83       	st	Z, r24
	
	while(!(ADCSRA & (1<<ADIF))); //wait for ADC to complete
  a6:	80 81       	ld	r24, Z
  a8:	84 ff       	sbrs	r24, 4
  aa:	fd cf       	rjmp	.-6      	; 0xa6 <get_adc_value+0xa>
	
	//ADCH and ADCL are where data ends up
	//10 bit value held in 2 8 bit registers

	lowbyte = ADCL; // 00000000 11101101
  ac:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	highbyte = ADCH; // 00000000 00000010
  b0:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	uint16_t finalvalue;
	finalvalue = (highbyte << 8) | lowbyte;
	//ADCSRA &= ~(1<<ADSC);
	return finalvalue;
  b4:	90 e0       	ldi	r25, 0x00	; 0
}
  b6:	92 2b       	or	r25, r18
  b8:	08 95       	ret

000000ba <main>:
int main(void)
{	
	uint16_t adc_value;
    setup();
  ba:	0e 94 40 00 	call	0x80	; 0x80 <setup>
    while (1) 
    {
		adc_value = get_adc_value();
  be:	0e 94 4e 00 	call	0x9c	; 0x9c <get_adc_value>
		if(adc_value > 600)
  c2:	89 35       	cpi	r24, 0x59	; 89
  c4:	22 e0       	ldi	r18, 0x02	; 2
  c6:	92 07       	cpc	r25, r18
  c8:	18 f0       	brcs	.+6      	; 0xd0 <main+0x16>
		{
			PORTD |= (1 << GREEN_LIGHT);
  ca:	58 9a       	sbi	0x0b, 0	; 11
			PORTD &= ~(1 << YELLOW_LIGHT);
  cc:	59 98       	cbi	0x0b, 1	; 11
			PORTD &= ~(1 << RED_LIGHT);
  ce:	5a 98       	cbi	0x0b, 2	; 11
		}
		if((adc_value < 600)&&(adc_value > 300))
  d0:	9c 01       	movw	r18, r24
  d2:	2d 52       	subi	r18, 0x2D	; 45
  d4:	31 40       	sbci	r19, 0x01	; 1
  d6:	2b 32       	cpi	r18, 0x2B	; 43
  d8:	31 40       	sbci	r19, 0x01	; 1
  da:	18 f4       	brcc	.+6      	; 0xe2 <main+0x28>
		{
			PORTD |= (1 << YELLOW_LIGHT);
  dc:	59 9a       	sbi	0x0b, 1	; 11
			PORTD &= ~(1 << RED_LIGHT);
  de:	5a 98       	cbi	0x0b, 2	; 11
			PORTD &= ~(1 << GREEN_LIGHT);
  e0:	58 98       	cbi	0x0b, 0	; 11
		}
		if(adc_value < 300)
  e2:	8c 32       	cpi	r24, 0x2C	; 44
  e4:	91 40       	sbci	r25, 0x01	; 1
  e6:	58 f7       	brcc	.-42     	; 0xbe <main+0x4>
		{
			PORTD |= (1 << RED_LIGHT);
  e8:	5a 9a       	sbi	0x0b, 2	; 11
			PORTD &= ~(1 << YELLOW_LIGHT);
  ea:	59 98       	cbi	0x0b, 1	; 11
			PORTD &= ~(1 << GREEN_LIGHT);
  ec:	58 98       	cbi	0x0b, 0	; 11
  ee:	e7 cf       	rjmp	.-50     	; 0xbe <main+0x4>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
